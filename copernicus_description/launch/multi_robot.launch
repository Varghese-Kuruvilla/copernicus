<launch>
    <arg name="robot1_namespace" default="robot1"/>
    <arg name="robot1_initX" default="0"/>
    <arg name="robot1_initY" default="0"/>
    <arg name="robot1_initYaw" default="0"/>
    <arg name="robot1_ref_latitude" default="1.3558320252002594"/>
    <arg name="robot1_ref_longitude" default="103.6922425031662"/>
    <arg name="robot1_tf_prefix" default="robot1_tf"/>
    <arg name="robot1_tf_pre" default="robot1_tf/"/>

    <arg name="robot2_namespace" default="robot2"/>
    <arg name="robot2_initX" default="2"/>
    <arg name="robot2_initY" default="0"/>
    <arg name="robot2_initYaw" default="0"/>
    <arg name="robot2_ref_latitude" default="1.3558320252002594"/>
    <arg name="robot2_ref_longitude" default="103.6922425031662"/>
    <arg name="robot2_tf_prefix" default="robot2_tf"/>
    <arg name="robot2_tf_pre" default="robot2_tf/"/>

    <arg name="map_file" default="$(find copernicus_navigation)/maps/gazebo.yaml"/>
    <arg name="gmapping" default="false"/>

    <arg name="model" default="$(find copernicus_description)/urdf/copernicus.xacro"/>

    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" unless="$(arg gmapping)"/>

    <group ns="$(arg robot1_namespace)">
        <param name="tf_prefix" value="$(arg robot1_tf_prefix)"/>
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

        <param name="robot_description" command="$(find xacro)/xacro.py --inorder $(arg model) robot_namespace:=$(arg robot1_namespace) ref_latitude:=$(arg robot1_ref_latitude) ref_longitude:=$(arg robot1_ref_longitude) tf_pre:=$(arg robot1_tf_pre)"/>

        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model $(arg robot1_namespace) -param /$(arg robot1_namespace)/robot_description -x $(arg robot1_initX) -y $(arg robot1_initY) -z 0.0 -R 0 -P 0 -Y $(arg robot1_initYaw)">
        </node>

        <include file="$(find copernicus_control)/launch/control.launch">
            <arg name="tf_pre" value="$(arg robot1_tf_pre)"/>
        </include>

        <include file="$(find copernicus_localization)/launch/localization.launch">
        </include>

        <include file="$(find copernicus_navigation)/launch/navigation.launch">
            <arg name="odom_frame" value="$(arg robot1_tf_pre)odom"/>
            <arg name="base_frame" value="$(arg robot1_tf_pre)base_link"/>
            <arg name="map_frame" value="map"/>

            <arg name="gmapping" value="$(arg gmapping)"/>

            <arg name="amcl_init_pose_x" value="$(arg robot1_initX)"/>
            <arg name="amcl_init_pose_y" value="$(arg robot1_initY)"/>
            <arg name="amcl_init_pose_yaw" value="$(arg robot1_initYaw)"/>
        </include>
    </group>

    <group ns="$(arg robot2_namespace)">
        <param name="tf_prefix" value="$(arg robot2_tf_prefix)"/>
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

        <param name="robot_description" command="$(find xacro)/xacro.py --inorder $(arg model) robot_namespace:=$(arg robot2_namespace) ref_latitude:=$(arg robot2_ref_latitude) ref_longitude:=$(arg robot2_ref_longitude) tf_pre:=$(arg robot2_tf_pre)"/>

        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model $(arg robot2_namespace) -param /$(arg robot2_namespace)/robot_description -x $(arg robot2_initX) -y $(arg robot2_initY) -z 0.0 -R 0 -P 0 -Y $(arg robot2_initYaw)">
        </node>

        <include file="$(find copernicus_control)/launch/control.launch">
            <arg name="tf_pre" value="$(arg robot2_tf_pre)"/>
        </include>

        <include file="$(find copernicus_localization)/launch/localization.launch">
        </include>

        <include file="$(find copernicus_navigation)/launch/navigation.launch">
            <arg name="odom_frame" value="$(arg robot2_tf_pre)odom"/>
            <arg name="base_frame" value="$(arg robot2_tf_pre)base_link"/>
            <arg name="map_frame" value="map"/>

            <arg name="gmapping" value="$(arg gmapping)"/>

            <arg name="amcl_init_pose_x" value="$(arg robot2_initX)"/>
            <arg name="amcl_init_pose_y" value="$(arg robot2_initY)"/>
            <arg name="amcl_init_pose_yaw" value="$(arg robot2_initYaw)"/>
        </include>
    </group>
</launch>